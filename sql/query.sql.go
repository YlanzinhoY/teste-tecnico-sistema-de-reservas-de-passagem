// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sql

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createManagementRoute = `-- name: CreateManagementRoute :exec
INSERT INTO management_route (
    id,
    route_name,
    origin,
    destination
) VALUES (
    $1,
    $2,
    $3,
    $4
) RETURNING id, route_name, origin, destination
`

type CreateManagementRouteParams struct {
	ID          string
	RouteName   sql.NullString
	Origin      sql.NullString
	Destination sql.NullString
}

func (q *Queries) CreateManagementRoute(ctx context.Context, arg CreateManagementRouteParams) error {
	_, err := q.db.ExecContext(ctx, createManagementRoute,
		arg.ID,
		arg.RouteName,
		arg.Origin,
		arg.Destination,
	)
	return err
}

const createManagementTravel = `-- name: CreateManagementTravel :exec

insert into management_travel(
    management_travel_id,
    management_routes_id,
    ticket_price,
    total_seats,
    travel_start,
    travel_finish,
    travel_company
) values (
$1,
$2,
$3,
$4,
$5,
$6,
          $7
) RETURNING management_routes_id, management_travel_id, ticket_price, total_seats, travel_start, travel_finish, travel_company
`

type CreateManagementTravelParams struct {
	ManagementTravelID uuid.UUID
	ManagementRoutesID string
	TicketPrice        float64
	TotalSeats         int32
	TravelStart        time.Time
	TravelFinish       time.Time
	TravelCompany      string
}

// -----------------------------------------------------------------------
func (q *Queries) CreateManagementTravel(ctx context.Context, arg CreateManagementTravelParams) error {
	_, err := q.db.ExecContext(ctx, createManagementTravel,
		arg.ManagementTravelID,
		arg.ManagementRoutesID,
		arg.TicketPrice,
		arg.TotalSeats,
		arg.TravelStart,
		arg.TravelFinish,
		arg.TravelCompany,
	)
	return err
}

const deleteManagementRoute = `-- name: DeleteManagementRoute :exec

delete from management_route
where id = $1
`

func (q *Queries) DeleteManagementRoute(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteManagementRoute, id)
	return err
}

const getManagementRouteAll = `-- name: GetManagementRouteAll :many
select id, route_name, origin, destination from management_route ORDER by id
`

func (q *Queries) GetManagementRouteAll(ctx context.Context) ([]ManagementRoute, error) {
	rows, err := q.db.QueryContext(ctx, getManagementRouteAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ManagementRoute
	for rows.Next() {
		var i ManagementRoute
		if err := rows.Scan(
			&i.ID,
			&i.RouteName,
			&i.Origin,
			&i.Destination,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRouteById = `-- name: GetRouteById :one
select id, route_name, origin, destination from management_route
where id = $1 limit 1
`

func (q *Queries) GetRouteById(ctx context.Context, id string) (ManagementRoute, error) {
	row := q.db.QueryRowContext(ctx, getRouteById, id)
	var i ManagementRoute
	err := row.Scan(
		&i.ID,
		&i.RouteName,
		&i.Origin,
		&i.Destination,
	)
	return i, err
}

const updateManagementRoute = `-- name: UpdateManagementRoute :one
update management_route
    set route_name =$2, origin = $3,destination = $4
where id = $1
returning id, route_name, origin, destination
`

type UpdateManagementRouteParams struct {
	ID          string
	RouteName   sql.NullString
	Origin      sql.NullString
	Destination sql.NullString
}

func (q *Queries) UpdateManagementRoute(ctx context.Context, arg UpdateManagementRouteParams) (ManagementRoute, error) {
	row := q.db.QueryRowContext(ctx, updateManagementRoute,
		arg.ID,
		arg.RouteName,
		arg.Origin,
		arg.Destination,
	)
	var i ManagementRoute
	err := row.Scan(
		&i.ID,
		&i.RouteName,
		&i.Origin,
		&i.Destination,
	)
	return i, err
}
